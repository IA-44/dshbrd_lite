import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import base64
from datetime import date
import calendar
from io import BytesIO
import plotly.express as px
import plotly.graph_objects as go
import os


# Configuration de la page
st.set_page_config(
    page_title="Suivi d'Activit√© Garage Automobile",
    page_icon="üîß",
    layout="wide"
)

# Titre de l'application
st.title('üìä Dashboard de Suivi d\'Activit√© - Garage Automobile')
st.markdown("""
Cette application permet de suivre l'activit√© d'un √©tablissement de r√©paration automobile (m√©canique et carrosserie).
* **Suivi des prestations factur√©es**
* **Montant des pi√®ces fournisseur**
* **D√©compte des charges mensuelles**
* **Gestion des absences du personnel**
* **Indicateurs de performance**
""")


# Fonction pour g√©n√©rer des donn√©es fictives
@st.cache_data
def generate_sample_data():
    # Donn√©es des prestations
    num_prestations = 1000
    dates = pd.date_range(start='2024-01-01', end='2024-12-31', freq='D')

    types_prestation = ['Revision intermediaire','Revision generale', 'Freinage',
                        'Carrosserie', 'Pneus', 'Suspension', 'Geometrie',
                        'Embrayage', 'Batterie', 'Climatisation', 'Diagnostic', 'Kit Distribution']

    types_vehicule = ['Citadine', 'Berline', 'SUV', 'Utilitaire', 'Break']

    mechaniciens = ['Saddem', 'Ismail']
    carrossiers = ['Sohaib']

    prestations = pd.DataFrame({
        'date': np.random.choice(dates, num_prestations),
        'type_prestation': np.random.choice(types_prestation, num_prestations),
        'type_vehicule': np.random.choice(types_vehicule, num_prestations),
        'technicien': np.random.choice(mechaniciens + carrossiers, num_prestations),
        'main_oeuvre_heures': np.random.uniform(0.5, 8, num_prestations).round(1),
        'montant_main_oeuvre': np.random.uniform(50, 800, num_prestations).round(2),
        'montant_pieces': np.random.uniform(20, 1500, num_prestations).round(2),
        'marge_pieces': np.random.uniform(0.1, 0.4, num_prestations).round(2),
        'tva_applicable': np.random.choice([0.2], num_prestations),
        'client': np.random.choice(['Particulier', 'Entreprise', 'Assurance'], num_prestations,
                                   p=[0.6, 0.3, 0.1])
    })

    prestations['montant_pieces_fournisseur'] = prestations['montant_pieces'] / (1 + prestations['marge_pieces'])
    prestations['montant_total_ht'] = prestations['montant_main_oeuvre'] + prestations['montant_pieces']
    prestations['montant_total_ttc'] = prestations['montant_total_ht'] * (1 + prestations['tva_applicable'])
    prestations['marge_totale'] = prestations['montant_main_oeuvre'] * 0.7 + (
                prestations['montant_pieces'] - prestations['montant_pieces_fournisseur'])

    # Donn√©es des charges
    charges_types = ['Loyer', '√âlectricit√©', 'Eau', 'Internet', 'Assurance', 'Alarme',
                     'Salaires', 'Charges sociales', 'Fournitures', 'Dette OI',
                     'Publicit√©', 'Comptabilit√©', 'Forfait tel', 'Carburant', 'IRP',
                     'Dette Irp', 'SPSAO', 'Renault', 'Flauraud', 'La Cora', 'AD',
                     'Ouest Injection', 'P&P']

    charges_data = []
    for month in range(1, 13):  # Janvier √† Decembre 2024
        for charge_type in charges_types:
            if charge_type == 'Salaires':
                montant = np.random.uniform(3800, 5300, 1)[0]
            elif charge_type == 'Charges sociales':
                montant = np.random.uniform(2000, 2500, 1)[0]
            elif charge_type == 'Loyer':
                montant = np.random.uniform(1830, 1950, 1)[0]
            elif charge_type == '√âlectricit√©':
                montant = np.random.uniform(190, 350, 1)[0]
            elif charge_type == 'Eau':
                montant = np.random.uniform(50, 150, 1)[0]
            elif charge_type == 'Assurance':
                montant = np.random.uniform(380, 450, 1)[0]
            elif charge_type == 'Alarme':
                montant = np.random.uniform(134, 150, 1)[0]
            elif charge_type == 'Comptabilit√©':
                montant = np.random.uniform(200, 300, 1)[0]
            elif charge_type == 'Flauraud':
                montant = np.random.uniform(1700, 2900, 1)[0]
            elif charge_type == 'Carburant':
                montant = np.random.uniform(320, 400, 1)[0]
            elif charge_type == 'Ouest Injection':
                montant = np.random.uniform(1500, 2300, 1)[0]
            elif charge_type == 'P&P':
                montant = np.random.uniform(1000, 1900, 1)[0]
            else:
                montant = np.random.uniform(100, 2000, 1)[0]

            charges_data.append({
                'date': f'2024-{month:02d}-01',
                'type': charge_type,
                'montant': round(montant, 2),
                'payee': np.random.choice([True, False], p=[0.8, 0.2])
            })

    charges = pd.DataFrame(charges_data)
    charges['date'] = pd.to_datetime(charges['date'])

    # Donn√©es du personnel
    personnel_data = []
    for nom in mechaniciens + carrossiers:
        for month in range(1, 13):  # Janvier √† Decembre 2024
            days_in_month = calendar.monthrange(2024, month)[1]
            absences = np.random.randint(0, 4)  # 0 √† 3 jours d'absence par mois

            for _ in range(absences):
                day = np.random.randint(1, days_in_month + 1)
                personnel_data.append({
                    'nom': nom,
                    'date': f'2024-{month:02d}-{day:02d}',
                    'type_absence': np.random.choice(['Maladie', 'Cong√© pay√©', 'Formation', 'Sans solde']),
                    'duree': np.random.randint(1, 4),  # 1 √† 3 jours
                    'status': 'M√©canicien' if nom in mechaniciens else 'Carrossier'
                })

    absences = pd.DataFrame(personnel_data)
    absences['date'] = pd.to_datetime(absences['date'])

    # Donn√©es des fournisseurs
    fournisseurs_data = []
    fournisseurs = ['Flauraud', 'P&P', 'Ouest Injection', 'La Cora AD', 'SPSAO', 'Renault', 'Audi VW']

    for month in range(1, 13):  # Janvier √† Decembre 2024
        for fournisseur in fournisseurs:
            for _ in range(np.random.randint(1, 10)):  # 1 √† 9 commandes par mois par fournisseur
                day = np.random.randint(1, calendar.monthrange(2024, month)[1] + 1)
                montant = np.random.uniform(500, 3000, 1)[0]
                fournisseurs_data.append({
                    'date': f'2024-{month:02d}-{day:02d}',
                    'fournisseur': fournisseur,
                    'montant': round(montant, 2),
                    'payee': np.random.choice([True, False], p=[0.7, 0.3]),
                    'delai_paiement': np.random.choice([30, 45, 60])
                })

    fournisseurs_df = pd.DataFrame(fournisseurs_data)
    fournisseurs_df['date'] = pd.to_datetime(fournisseurs_df['date'])

    return prestations, charges, absences, fournisseurs_df

    # G√©n√©ration des donn√©es de bonus
    bonus_data = []
    for month in range(1, 13):  # Janvier √† D√©cembre 2024
        for _ in range(np.random.randint(1, 6)):  # De 1 √† 5 bonus par mois
            day = np.random.randint(1, calendar.monthrange(2024, month)[1] + 1)
            amount = np.random.uniform(50, 1000)  # Montant entre 50 et 1000 euros
            description = np.random.choice([
                "Bonus performance trimestrielle",
                "Bonus fid√©lit√© client",
                "Bonus innovation technique",
                "Bonus qualit√© service",
                "Bonus d√©passement objectif"
            ])
            bonus_data.append({
                'date': f'2024-{month:02d}-{day:02d}',
                'amount': round(amount, 2),
                'description': description
            })

    bonus_df = pd.DataFrame(bonus_data)
    bonus_df['id_bonus'] = range(1, len(bonus_df) + 1)
    bonus_df['date'] = pd.to_datetime(bonus_df['date'])

    # Int√©grer les donn√©es de bonus dans le dictionnaire des donn√©es
    if "bonus" not in data:
        data["bonus"] = pd.DataFrame()
    data["bonus"] = pd.concat([data["bonus"], bonus_df], ignore_index=True)
"""
    # Interface utilisateur pour ajouter des bonus
    with st.expander("Ajouter un Bonus"):
        col1, col2 = st.columns(2)
        with col1:
            new_date = st.date_input("Date du Bonus")
            new_amount = st.number_input("Montant du Bonus", min_value=0)
        with col2:
            new_description = st.text_input("Description du Bonus")

        if st.button("Ajouter le Bonus"):
            # Ajout des donn√©es dans le DataFrame
            data['bonus'] = pd.concat([
                data['bonus'],
                pd.DataFrame({
                    'id_bonus': [len(data['bonus']) + 1],
                    'date': [new_date],
                    'amount': [new_amount],
                    'description': [new_description]
                })
            ])
"""
    # Section pour visualiser les bonus
    with st.expander("Analyse des Bonus"):
        col1, col2 = st.columns(2)

        # Graphique de l'√©volution des bonus au fil du temps
        with col1:
            st.subheader("√âvolution des bonus")
            if not data['bonus'].empty:
                fig = px.line(data['bonus'], x='date', y='amount',
                              title="Montant des bonus au fil du temps",
                              labels={'x': 'Date', 'y': 'Montant'})
                st.plotly_chart(fig)
            else:
                st.info("Aucun bonus enregistr√© pour l'instant.")

        # Tableau des bonus
        with col2:
            st.subheader("Liste des bonus")
            if not data['bonus'].empty:
                st.dataframe(data['bonus'],
                             column_config={
                                 'id_bonus': {'visible': False},
                                 'date': {'label': 'Date'},
                                 'amount': {'label': 'Montant', 'format': '${{value:.2f}'},
                                 'description': {'label': 'Description'}
                             })
            else:
                st.info("Aucun bonus enregistr√© pour l'instant.")
"""
    # Sauvegarde dans le fichier CSV
    data['bonus'].to_csv(f"{data_dir}/bonus.csv", index=False)
    st.success("Bonus ajout√© avec succ√®s !")
"""
    # Visualisation des bonus existants
    st.subheader("Historique des Bonus")
    st.dataframe(data['bonus'], use_container_width=True)

    # Interface utilisateur pour filtrer les bonus par p√©riode
    st.subheader("Calcul du Total des Bonus selon la P√©riode")
    start_date = st.date_input("Date de D√©but", date.today())
    end_date = st.date_input("Date de Fin", date.today())

    if start_date <= end_date:
        filtered_bonus = data['bonus'][
            (data['bonus']['date'] >= start_date) &
            (data['bonus']['date'] <= end_date)
            ]

        total_amount = filtered_bonus['amount'].sum()
        st.write(f"Montant Total du Bonus pour la p√©riode : **{total_amount}**")
    else:
        st.warning("La date de fin doit √™tre sup√©rieure ou √©gale √† la date de d√©but.")


# Charger les donn√©es
prestations, charges, absences, fournisseurs = generate_sample_data()

# Sidebar - Param√®tres g√©n√©raux
st.sidebar.header('Filtres')

# Filtres de date
min_date = prestations['date'].min().date()
max_date = prestations['date'].max().date()

date_range = st.sidebar.date_input(
    "P√©riode d'analyse",
    value=(min_date, max_date),
    min_value=min_date,
    max_value=max_date
)

if len(date_range) == 2:
    start_date, end_date = date_range
    mask_date = (prestations['date'].dt.date >= start_date) & (prestations['date'].dt.date <= end_date)
    filtered_prestations = prestations[mask_date]

    mask_date_charges = (charges['date'].dt.date >= start_date) & (charges['date'].dt.date <= end_date)
    filtered_charges = charges[mask_date_charges]

    mask_date_absences = (absences['date'].dt.date >= start_date) & (absences['date'].dt.date <= end_date)
    filtered_absences = absences[mask_date_absences]

    mask_date_fournisseurs = (fournisseurs['date'].dt.date >= start_date) & (fournisseurs['date'].dt.date <= end_date)
    filtered_fournisseurs = fournisseurs[mask_date_fournisseurs]
else:
    filtered_prestations = prestations
    filtered_charges = charges
    filtered_absences = absences
    filtered_fournisseurs = fournisseurs

# Filtre par type de prestation
types_prestation_unique = sorted(prestations['type_prestation'].unique())
selected_types = st.sidebar.multiselect('Type de prestation', types_prestation_unique, default=types_prestation_unique)

if selected_types:
    filtered_prestations = filtered_prestations[filtered_prestations['type_prestation'].isin(selected_types)]

# Filtre par technicien
techniciens_unique = sorted(prestations['technicien'].unique())
selected_techniciens = st.sidebar.multiselect('Technicien', techniciens_unique, default=techniciens_unique)

if selected_techniciens:
    filtered_prestations = filtered_prestations[filtered_prestations['technicien'].isin(selected_techniciens)]


# Fonction pour t√©l√©charger les donn√©es
def download_df(df, filename):
    csv = df.to_csv(index=False)
    b64 = base64.b64encode(csv.encode()).decode()
    href = f'<a href="data:file/csv;base64,{b64}" download="{filename}.csv">T√©l√©charger en CSV</a>'
    return href


# Organisation en onglets
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "üìà Vue d'ensemble",
    "üîß Prestations",
    "üí∞ Finances",
    "üë• Personnel",
    "üìä Analyses Avanc√©es",
    "üíµ Bonus"
])

with tab1:
    st.header("Vue d'ensemble de l'activit√©")

    # Indicateurs cl√©s
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        total_ca = filtered_prestations['montant_total_ttc'].sum()
        st.metric("CA Total TTC", f"{total_ca:.2f} ‚Ç¨")

    with col2:
        total_marge = filtered_prestations['marge_totale'].sum()
        st.metric("Marge Totale", f"{total_marge:.2f} ‚Ç¨")

    with col3:
        taux_marge = (total_marge / filtered_prestations[
            'montant_total_ht'].sum()) * 100 if not filtered_prestations.empty else 0
        st.metric("Taux de Marge", f"{taux_marge:.1f} %")

    with col4:
        total_prestations = len(filtered_prestations)
        st.metric("Nombre Prestations", total_prestations)

    # Graphique CA hebdomadaire
    st.subheader("√âvolution du CA")

    # Pr√©parer les donn√©es par semaine
    if not filtered_prestations.empty:
        prestations_by_week = filtered_prestations.copy()
        prestations_by_week['semaine'] = prestations_by_week['date'].dt.isocalendar().week
        prestations_by_week['mois'] = prestations_by_week['date'].dt.month
        weekly_revenue = prestations_by_week.groupby(['mois', 'semaine'])['montant_total_ttc'].sum().reset_index()
        weekly_revenue['p√©riode'] = weekly_revenue.apply(lambda x: f"M{x['mois']}-S{x['semaine']}", axis=1)

        fig = px.bar(
            weekly_revenue,
            x='p√©riode',
            y='montant_total_ttc',
            title="CA Hebdomadaire",
            labels={'montant_total_ttc': 'CA TTC (‚Ç¨)', 'p√©riode': 'P√©riode'},
            text_auto='.2s'
        )
        st.plotly_chart(fig, use_container_width=True, key='√©volution_ca')
    else:
        st.info("Aucune donn√©e disponible pour la p√©riode s√©lectionn√©e")

    # R√©partition par type de prestation
    col1, col2 = st.columns(2)

    with col1:
        if not filtered_prestations.empty:
            prestation_type_revenue = filtered_prestations.groupby('type_prestation')[
                'montant_total_ttc'].sum().reset_index()
            fig = px.pie(
                prestation_type_revenue,
                values='montant_total_ttc',
                names='type_prestation',
                title="R√©partition du CA par type de prestation"
            )
            st.plotly_chart(fig, use_container_width=True, key='type_prestation')
        else:
            st.info("Aucune donn√©e disponible pour la p√©riode s√©lectionn√©e")

    with col2:
        if not filtered_prestations.empty:
            tech_performance = filtered_prestations.groupby('technicien').agg({
                'montant_total_ttc': 'sum',
                'date': 'count'
            }).reset_index()
            tech_performance.rename(columns={'date': 'nb_prestations'}, inplace=True)
            tech_performance.sort_values('montant_total_ttc', ascending=False, inplace=True)

            fig = px.bar(
                tech_performance,
                x='technicien',
                y=['montant_total_ttc', 'nb_prestations'],
                barmode='group',
                title="Performance par technicien",
                labels={'value': '', 'technicien': 'Technicien', 'variable': 'Mesure'},
                text_auto='.2s'
            )
            st.plotly_chart(fig, use_container_width=True, key='performance_tech')
        else:
            st.info("Aucune donn√©e disponible pour la p√©riode s√©lectionn√©e")

with tab2:
    st.header("Suivi des prestations")

    # Filtres suppl√©mentaires pour les prestations
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Donn√©es brutes")
        st.write(f"Nombre de prestations: {len(filtered_prestations)}")
        st.dataframe(filtered_prestations[['date', 'type_prestation', 'technicien', 'montant_main_oeuvre',
                                           'montant_pieces', 'montant_total_ttc', 'marge_totale']])
        st.markdown(download_df(filtered_prestations, "prestations"), unsafe_allow_html=True)

    with col2:
        if not filtered_prestations.empty:
            st.subheader("Top prestations par marge")
            top_prestations = filtered_prestations.sort_values('marge_totale', ascending=False).head(10)

            fig = px.bar(
                top_prestations,
                x='type_prestation',
                y='marge_totale',
                color='technicien',
                title="Top 10 des prestations par marge",
                labels={'marge_totale': 'Marge (‚Ç¨)', 'type_prestation': 'Type de prestation'},
                text_auto='.2s'
            )
            st.plotly_chart(fig, use_container_width=True, key='top_presta_marge')
        else:
            st.info("Aucune donn√©e disponible pour la p√©riode s√©lectionn√©e")

    # Analyses par type de v√©hicule
    st.subheader("Analyse par type de v√©hicule")

    if not filtered_prestations.empty:
        vehicle_analysis = filtered_prestations.groupby('type_vehicule').agg({
            'montant_total_ttc': 'sum',
            'main_oeuvre_heures': 'sum',
            'date': 'count'
        }).reset_index()

        vehicle_analysis.rename(columns={'date': 'nb_prestations'}, inplace=True)
        vehicle_analysis['montant_moyen'] = vehicle_analysis['montant_total_ttc'] / vehicle_analysis['nb_prestations']
        vehicle_analysis['heures_moyennes'] = vehicle_analysis['main_oeuvre_heures'] / vehicle_analysis[
            'nb_prestations']

        col1, col2 = st.columns(2)

        with col1:
            fig = px.bar(
                vehicle_analysis,
                x='type_vehicule',
                y='montant_moyen',
                title="Montant moyen par type de v√©hicule",
                labels={'montant_moyen': 'Montant moyen (‚Ç¨)', 'type_vehicule': 'Type de v√©hicule'},
                text_auto='.2s'
            )
            st.plotly_chart(fig, use_container_width=True, key='type_vehicule')

        with col2:
            fig = px.bar(
                vehicle_analysis,
                x='type_vehicule',
                y='heures_moyennes',
                title="Heures de main d'≈ìuvre moyennes par type de v√©hicule",
                labels={'heures_moyennes': 'Heures moyennes', 'type_vehicule': 'Type de v√©hicule'},
                text_auto='.2f'
            )
            st.plotly_chart(fig, use_container_width=True, key='mo_par_vehicule')
    else:
        st.info("Aucune donn√©e disponible pour la p√©riode s√©lectionn√©e")

with tab3:
    st.header("Suivi financier")

    # R√©partition CA vs Charges
    st.subheader("CA vs Charges")

    col1, col2 = st.columns(2)

    with col1:
        if not filtered_prestations.empty and not filtered_charges.empty:
            # Regrouper les donn√©es par mois
            ca_monthly = filtered_prestations.groupby(filtered_prestations['date'].dt.month)[
                'montant_total_ttc'].sum().reset_index()
            ca_monthly.rename(columns={'date': 'mois'}, inplace=True)

            charges_monthly = filtered_charges.groupby(filtered_charges['date'].dt.month)['montant'].sum().reset_index()
            charges_monthly.rename(columns={'date': 'mois'}, inplace=True)

            # Fusionner les donn√©es
            months_list = range(1, 13)
            month_names = ['Jan', 'F√©v', 'Mar', 'Avr', 'Mai', 'Juin', 'Juil', 'Ao√ªt', 'Sep', 'Oct', 'Nov', 'D√©c']
            months_df = pd.DataFrame({'mois': list(months_list), 'nom_mois': month_names[:len(months_list)]})

            # Joindre les donn√©es de CA
            months_df = pd.merge(months_df, ca_monthly, on='mois', how='left')
            months_df = pd.merge(months_df, charges_monthly, on='mois', how='left')
            months_df.rename(columns={'montant_total_ttc': 'CA', 'montant': 'Charges'}, inplace=True)
            months_df.fillna(0, inplace=True)

            # Calcul du r√©sultat
            months_df['R√©sultat'] = months_df['CA'] - months_df['Charges']

            # Graphique
            fig = go.Figure()

            fig.add_trace(go.Bar(
                x=months_df['nom_mois'],
                y=months_df['CA'],
                name='CA TTC',
                marker_color='green'
            ))

            fig.add_trace(go.Bar(
                x=months_df['nom_mois'],
                y=months_df['Charges'],
                name='Charges',
                marker_color='red'
            ))

            fig.add_trace(go.Scatter(
                x=months_df['nom_mois'],
                y=months_df['R√©sultat'],
                name='R√©sultat',
                mode='lines+markers',
                line=dict(color='blue', width=2)
            ))

            fig.update_layout(
                title='CA vs Charges par mois',
                xaxis_title='Mois',
                yaxis_title='Montant (‚Ç¨)',
                barmode='group',
                hovermode='x unified'
            )

            st.plotly_chart(fig, use_container_width=True, key='ca_charge')
        else:
            st.info("Donn√©es insuffisantes pour la p√©riode s√©lectionn√©e")

    with col2:
        if not filtered_charges.empty:
            # R√©partition des charges par type
            charges_by_type = filtered_charges.groupby('type')['montant'].sum().reset_index()
            charges_by_type.sort_values('montant', ascending=False, inplace=True)

            fig = px.pie(
                charges_by_type,
                values='montant',
                names='type',
                title="R√©partition des charges par type"
            )

            st.plotly_chart(fig, use_container_width=True, key='charge_par_type')
        else:
            st.info("Aucune donn√©e de charges disponible pour la p√©riode s√©lectionn√©e")

    # Suivi des fournisseurs
    st.subheader("Suivi des pi√®ces et fournisseurs")

    col1, col2 = st.columns(2)

    with col1:
        if not filtered_fournisseurs.empty:
            st.write("Factures fournisseurs")
            # Calcul des factures impay√©es
            unpaid = filtered_fournisseurs[~filtered_fournisseurs['payee']]
            st.write(f"Total factures impay√©es: {unpaid['montant'].sum():.2f} ‚Ç¨")

            # Graphique des factures par fournisseur
            fournisseur_summary = filtered_fournisseurs.groupby('fournisseur').agg({
                'montant': 'sum',
                'payee': lambda x: (~x).sum()  # Compte les non-pay√©es
            }).reset_index()

            fournisseur_summary.rename(columns={'payee': 'nb_impayees'}, inplace=True)

            fig = px.bar(
                fournisseur_summary,
                x='fournisseur',
                y='montant',
                color='nb_impayees',
                title="Montant des achats par fournisseur",
                labels={'montant': 'Montant total (‚Ç¨)', 'fournisseur': 'Fournisseur',
                        'nb_impayees': 'Nb factures impay√©es'},
                text_auto='.2s',
                color_continuous_scale='Reds'
            )

            st.plotly_chart(fig, use_container_width=True, key='facture_fournisseur')
        else:
            st.info("Aucune donn√©e fournisseur disponible pour la p√©riode s√©lectionn√©e")

    with col2:
        if not filtered_prestations.empty:
            # Ratio pi√®ces vs main d'≈ìuvre
            pieces_mo_data = pd.DataFrame({
                'Type': ['Pi√®ces', 'Main d\'≈ìuvre'],
                'Montant': [
                    filtered_prestations['montant_pieces'].sum(),
                    filtered_prestations['montant_main_oeuvre'].sum()
                ]
            })

            fig = px.pie(
                pieces_mo_data,
                values='Montant',
                names='Type',
                title="R√©partition pi√®ces vs main d'≈ìuvre",
                hole=0.4
            )

            st.plotly_chart(fig, use_container_width=True, key='ratio_pieces_mo')

            # Marge sur pi√®ces
            marge_pieces = filtered_prestations['montant_pieces'].sum() - filtered_prestations[
                'montant_pieces_fournisseur'].sum()
            taux_marge_pieces = (marge_pieces / filtered_prestations['montant_pieces_fournisseur'].sum()) * 100 if \
            filtered_prestations['montant_pieces_fournisseur'].sum() > 0 else 0

            st.metric("Marge sur pi√®ces", f"{marge_pieces:.2f} ‚Ç¨", f"{taux_marge_pieces:.1f}%")
        else:
            st.info("Aucune donn√©e de prestations disponible pour la p√©riode s√©lectionn√©e")

    # Charges √† payer
    st.subheader("Charges restant √† payer")

    if not filtered_charges.empty:
        charges_impayees = filtered_charges[~filtered_charges['payee']]

        if not charges_impayees.empty:
            st.dataframe(charges_impayees)
            st.markdown(download_df(charges_impayees, "charges_a_payer"), unsafe_allow_html=True)

            st.metric("Total √† payer", f"{charges_impayees['montant'].sum():.2f} ‚Ç¨")
        else:
            st.success("Toutes les charges de la p√©riode ont √©t√© pay√©es")
    else:
        st.info("Aucune donn√©e de charges disponible pour la p√©riode s√©lectionn√©e")

with tab4:
    st.header("Gestion du personnel")

    # Analyse des absences
    st.subheader("Suivi des absences")

    if not filtered_absences.empty:
        absences_by_person = filtered_absences.groupby('nom').agg({
            'duree': 'sum',
            'date': 'count'
        }).reset_index()

        absences_by_person.rename(columns={'date': 'nb_absences', 'duree': 'jours_absence'}, inplace=True)
        absences_by_person.sort_values('jours_absence', ascending=False, inplace=True)

        col1, col2 = st.columns(2)

        with col1:
            fig = px.bar(
                absences_by_person,
                x='nom',
                y='jours_absence',
                title="Jours d'absence par employ√©",
                labels={'jours_absence': 'Jours d\'absence', 'nom': 'Employ√©'},
                text_auto='.0f'
            )
            st.plotly_chart(fig, use_container_width=True, key='absences')

        with col2:
            absences_by_type = filtered_absences.groupby('type_absence')['duree'].sum().reset_index()

            fig = px.pie(
                absences_by_type,
                values='duree',
                names='type_absence',
                title="R√©partition des absences par type"
            )
            st.plotly_chart(fig, use_container_width=True, key='duree_type_absence')

        # Calendrier des absences
        st.subheader("Calendrier des absences")

        absences_by_date = filtered_absences.copy()
        absences_by_date['semaine'] = absences_by_date['date'].dt.isocalendar().week
        absences_by_date['mois'] = absences_by_date['date'].dt.month_name()

        # Cr√©er un calendrier mensuel
        absences_grouped = absences_by_date.groupby(['mois', 'date']).agg({
            'nom': lambda x: ', '.join(set(x)),
            'duree': 'sum'
        }).reset_index()

        # Afficher les donn√©es d'absence par jour
        st.dataframe(absences_grouped[['date', 'nom', 'duree']])
        st.markdown(download_df(filtered_absences, "absences"), unsafe_allow_html=True)
    else:
        st.info("Aucune donn√©e d'absence disponible pour la p√©riode s√©lectionn√©e")

    # Productivit√© du personnel
    st.subheader("Productivit√© du personnel")

    if not filtered_prestations.empty:
        # Heures factur√©es par technicien
        heures_par_tech = filtered_prestations.groupby('technicien')['main_oeuvre_heures'].sum().reset_index()
        heures_par_tech.sort_values('main_oeuvre_heures', ascending=False, inplace=True)

        # Calculer la moyenne d'heures factur√©es par jour ouvr√© (estim√© √† 20 jours par mois)
        selected_months = len(set(filtered_prestations['date'].dt.month))
        jours_ouvres = selected_months * 20  # Estimation

        heures_par_tech['moy_heures_jour'] = heures_par_tech['main_oeuvre_heures'] / jours_ouvres

        fig = px.bar(
            heures_par_tech,
            x='technicien',
            y='moy_heures_jour',
            title="Heures factur√©es en moyenne par jour ouvr√©",
            labels={'moy_heures_jour': 'Heures factur√©es/jour', 'technicien': 'Technicien'},
            text_auto='.1f'
        )

        # Ajouter une ligne pour l'objectif (par exemple 7h par jour)
        fig.add_shape(
            type="line",
            x0=-0.5,
            y0=7,
            x1=len(heures_par_tech) - 0.5,
            y1=7,
            line=dict(color="red", width=2, dash="dash"),
        )

        fig.add_annotation(
            x=len(heures_par_tech) / 2,
            y=7.2,
            text="Objectif",
            showarrow=False,
            font=dict(color="red")
        )

        st.plotly_chart(fig, use_container_width=True, key='productivite_personnel')
    else:
        st.info("Aucune donn√©e de prestations disponible pour la p√©riode s√©lectionn√©e")

with tab5:
    st.header("Analyses avanc√©es")

    # Performance par type de v√©hicule et type de prestation
    st.subheader("Performance par type de v√©hicule et type de prestation")

    if not filtered_prestations.empty:
        # Cr√©ation d'une heatmap pour voir les prestations les plus rentables par type de v√©hicule
        perf_matrix = filtered_prestations.pivot_table(
            index='type_vehicule',
            columns='type_prestation',
            values='marge_totale',
            aggfunc='mean'
        ).fillna(0)

        fig = px.imshow(
            perf_matrix,
            labels=dict(x="Type de prestation", y="Type de v√©hicule", color="Marge moyenne (‚Ç¨)"),
            text_auto='.0f',
            aspect="auto",
            title="Marge moyenne par type de v√©hicule et prestation"
        )

        st.plotly_chart(fig, use_container_width=True, key='heatmap_rentabilite')

        # Temps moyen par type de prestation
        temps_moyen = filtered_prestations.groupby('type_prestation')['main_oeuvre_heures'].mean().reset_index()
        temps_moyen.sort_values('main_oeuvre_heures', ascending=False, inplace=True)

        fig = px.bar(
            temps_moyen,
            x='type_prestation',
            y='main_oeuvre_heures',
            title="Temps moyen par type de prestation",
            labels={'main_oeuvre_heures': 'Heures de main d\'≈ìuvre', 'type_prestation': 'Type de prestation'},
            text_auto='.1f'
        )

        st.plotly_chart(fig, use_container_width=True, key='tps_moyen_prestation')
    else:
        st.info("Aucune donn√©e disponible pour la p√©riode s√©lectionn√©e")

    # Analyse de rentabilit√©
    st.subheader("Analyse de rentabilit√©")

    col1, col2 = st.columns(2)

    with col1:
        if not filtered_prestations.empty:
            # Calcul du ratio de rentabilit√© (marge / heures)
            filtered_prestations['rentabilite_horaire'] = filtered_prestations['marge_totale'] / filtered_prestations[
                'main_oeuvre_heures']

            rentabilite_prestation = filtered_prestations.groupby('type_prestation')[
                'rentabilite_horaire'].mean().reset_index()
            rentabilite_prestation.sort_values('rentabilite_horaire', ascending=False, inplace=True)

            fig = px.bar(
                rentabilite_prestation,
                x='type_prestation',
                y='rentabilite_horaire',
                title="Rentabilit√© horaire par type de prestation",
                labels={'rentabilite_horaire': 'Marge par heure (‚Ç¨/h)', 'type_prestation': 'Type de prestation'},
                text_auto='.0f'
            )

            st.plotly_chart(fig, use_container_width=True, key='rentabilite_marge_heure')
        else:
            st.info("Aucune donn√©e de prestations disponible pour la p√©riode s√©lectionn√©e")

    with col2:
        if not filtered_prestations.empty and not filtered_charges.empty:
            # Calcul du point mort
            ca_total = filtered_prestations['montant_total_ttc'].sum()
            charges_totales = filtered_charges['montant'].sum()

            # Calculer le CA journalier moyen
            jours_periode = (filtered_prestations['date'].max() - filtered_prestations['date'].min()).days + 1
            ca_journalier = ca_total / jours_periode if jours_periode > 0 else 0

            # Calculer les charges journali√®res
            charges_journalieres = charges_totales / jours_periode if jours_periode > 0 else 0

            # Point mort en jours (combien de jours pour couvrir les charges)
            point_mort_jours = charges_totales / ca_journalier if ca_journalier > 0 else float('inf')

            # Afficher le r√©sultat
            st.metric("CA journalier moyen", f"{ca_journalier:.2f} ‚Ç¨")
            st.metric("Charges journali√®res moyennes", f"{charges_journalieres:.2f} ‚Ç¨")

            if point_mort_jours != float('inf'):
                st.metric("Point mort", f"{point_mort_jours:.1f} jours de travail")
            else:
                st.error("Point mort non calculable (CA journalier nul)")
        else:
            st.info("Donn√©es insuffisantes pour la p√©riode s√©lectionn√©e")

    # Pr√©visions et tendances
    st.subheader("Pr√©visions et tendances")

    if not filtered_prestations.empty:
        # √âvolution du CA au fil du temps
        ca_daily = filtered_prestations.groupby(filtered_prestations['date'])['montant_total_ttc'].sum().reset_index()
        ca_daily.sort_values('date', inplace=True)

        # Calculer la moyenne mobile sur 7 jours
        ca_daily['moyenne_mobile_7j'] = ca_daily['montant_total_ttc'].rolling(window=7, min_periods=1).mean()

        fig = px.line(
            ca_daily,
            x='date',
            y=['montant_total_ttc', 'moyenne_mobile_7j'],
            title="√âvolution du CA quotidien et tendance",
            labels={'value': 'Montant (‚Ç¨)', 'date': 'Date', 'variable': ''},
            color_discrete_map={
                'montant_total_ttc': 'lightblue',
                'moyenne_mobile_7j': 'darkblue'
            }
        )

        fig.update_layout(hovermode="x unified")
        st.plotly_chart(fig, use_container_width=True, key='√©volution_ca_temps')

        # Analyse de saisonnalit√© par jour de la semaine
        ca_daily['jour_semaine'] = ca_daily['date'].dt.day_name()

        # Ordre des jours de la semaine
        jours_ordre = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        jours_fr = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche']

        mapping_jours = dict(zip(jours_ordre, jours_fr))
        ca_daily['jour_semaine_fr'] = ca_daily['jour_semaine'].map(mapping_jours)

        ca_jour_semaine = ca_daily.groupby('jour_semaine_fr')['montant_total_ttc'].mean().reset_index()

        # R√©ordonner les jours de la semaine
        ca_jour_semaine['ordre'] = ca_jour_semaine['jour_semaine_fr'].map(dict(zip(jours_fr, range(7))))
        ca_jour_semaine.sort_values('ordre', inplace=True)

        fig = px.bar(
            ca_jour_semaine,
            x='jour_semaine_fr',
            y='montant_total_ttc',
            title="CA moyen par jour de la semaine",
            labels={'montant_total_ttc': 'CA moyen (‚Ç¨)', 'jour_semaine_fr': 'Jour de la semaine'},
            text_auto='.0f'
        )

        st.plotly_chart(fig, use_container_width=True, key='rentabilite_jour_semaine')
    else:
        st.info("Aucune donn√©e de prestations disponible pour la p√©riode s√©lectionn√©e")

    # KPIs avanc√©s
    st.subheader("KPIs et indicateurs cl√©s")

    col1, col2, col3 = st.columns(3)

    if not filtered_prestations.empty:
        with col1:
            # Taux de conversion horaire (combien rapporte une heure factur√©e en moyenne)
            taux_conversion = filtered_prestations['montant_total_ttc'].sum() / filtered_prestations[
                'main_oeuvre_heures'].sum() if filtered_prestations['main_oeuvre_heures'].sum() > 0 else 0
            st.metric("Taux horaire moyen factur√©", f"{taux_conversion:.2f} ‚Ç¨/h")

            # Montant moyen par prestation
            montant_moyen = filtered_prestations['montant_total_ttc'].mean()
            st.metric("Montant moyen par prestation", f"{montant_moyen:.2f} ‚Ç¨")

        with col2:
            # Ratio pi√®ces/main d'≈ìuvre
            ratio_pieces_mo = filtered_prestations['montant_pieces'].sum() / filtered_prestations[
                'montant_main_oeuvre'].sum() if filtered_prestations['montant_main_oeuvre'].sum() > 0 else 0
            st.metric("Ratio pi√®ces/main d'≈ìuvre", f"{ratio_pieces_mo:.2f}")

            # Marge moyenne par prestation
            marge_moyenne = filtered_prestations['marge_totale'].mean()
            st.metric("Marge moyenne par prestation", f"{marge_moyenne:.2f} ‚Ç¨")

        with col3:
            # Nombre de prestations par jour
            nb_jours = len(filtered_prestations['date'].dt.date.unique())
            prestations_par_jour = len(filtered_prestations) / nb_jours if nb_jours > 0 else 0
            st.metric("Prestations par jour", f"{prestations_par_jour:.1f}")

            # D√©lai moyen entre prestations (pour les clients r√©guliers)
            if len(filtered_prestations) > 10:  # Seulement si assez de donn√©es
                # Simuler un ID client pour l'exemple (en r√©alit√© il faudrait avoir cette donn√©e)
                filtered_prestations['client_id'] = np.random.randint(1, 100, size=len(filtered_prestations))

                # Compter les clients avec plus d'une prestation
                clients_count = filtered_prestations.groupby('client_id').size()
                clients_reguliers = clients_count[clients_count > 1].count()

                st.metric("Clients r√©guliers", f"{clients_reguliers}")
            else:
                st.info("Donn√©es insuffisantes pour certains KPIs")
    else:
        st.info("Aucune donn√©e disponible pour calculer les KPIs")

    # Recommandations automatiques
    st.subheader("Recommandations")

    if not filtered_prestations.empty and not filtered_charges.empty:
        recommandations = []

        # Analyse des prestations les plus rentables
        prestations_rentables = filtered_prestations.groupby('type_prestation')[
            'rentabilite_horaire'].mean().sort_values(ascending=False)
        prestations_populaires = filtered_prestations.groupby('type_prestation').size().sort_values(ascending=False)

        # Identifier les prestations rentables mais peu populaires
        top_rentables = set(prestations_rentables.head(3).index)
        top_populaires = set(prestations_populaires.head(3).index)

        opportunites = top_rentables - top_populaires
        if opportunites:
            recommandations.append(
                f"Opportunit√©: Les prestations {', '.join(opportunites)} sont tr√®s rentables mais peu fr√©quentes. Consid√©rez des actions marketing pour ces services.")

        # Analyse des techniciens
        tech_perf = filtered_prestations.groupby('technicien')['marge_totale'].sum().sort_values()
        if len(tech_perf) >= 3:
            least_performing = tech_perf.index[0]
            recommandations.append(
                f"Formation: {least_performing} g√©n√®re moins de marge que les autres techniciens. Envisagez une formation ou un accompagnement.")

        # Analyse des charges
        charges_elevees = filtered_charges.groupby('type')['montant'].sum().sort_values(ascending=False).head(1)
        if not charges_elevees.empty:
            top_charge = charges_elevees.index[0]
            recommandations.append(
                f"Optimisation des co√ªts: {top_charge} repr√©sente une part importante des charges. Examinez les possibilit√©s de r√©duction.")

        # Analyse saisonni√®re
        if 'ca_jour_semaine' in locals():
            jours_faibles = ca_jour_semaine.sort_values('montant_total_ttc').iloc[0]['jour_semaine_fr']
            recommandations.append(
                f"Activit√©: Le {jours_faibles} est g√©n√©ralement le jour le moins actif. Envisagez des promotions sp√©ciales pour ce jour.")

        # Afficher les recommandations
        if recommandations:
            for i, rec in enumerate(recommandations, 1):
                st.info(f"{i}. {rec}")
        else:
            st.success("Pas de recommandations sp√©cifiques pour la p√©riode s√©lectionn√©e.")
    else:
        st.info("Donn√©es insuffisantes pour g√©n√©rer des recommandations")
        
with tab6:

    # Initialisation des donn√©es si elles ne sont pas d√©j√† charg√©es
    def generate_sample_data():
        # Donn√©es par d√©faut pour les bonus
        if 'bonus' not in st.session_state:
            st.session_state.bonus = pd.DataFrame({
                'id_bonus': [],
                'date': [],
                'amount': [],
                'description': []
            })

        return {
            'bonus': st.session_state.bonus
        }

    # Charger les donn√©es si elles existent, sinon g√©n√©rer des donn√©es par d√©faut
    data = generate_sample_data()

    # Interface utilisateur principale
    st.title("Gestion des Bonus")

    # Section pour ajouter de nouveaux bonus
    with st.expander("Ajouter un Bonus"):
        col1, col2 = st.columns(2)

        with col1:
            new_date = st.date_input("Date du Bonus", date.today())
            new_amount = st.number_input("Montant du Bonus", min_value=0)

        with col2:
            new_description = st.text_input("Description du Bonus")

        if st.button("Ajouter le Bonus"):
            # Ajout des donn√©es dans le DataFrame
            data['bonus'] = pd.concat([
                data['bonus'],
                pd.DataFrame({
                    'id_bonus': [len(data['bonus']) + 1],
                    'date': [new_date],
                    'amount': [new_amount],
                    'description': [new_description]
                })
            ])

            # Sauvegarde dans le fichier CSV
            st.session_state.bonus = data['bonus']
            st.success("Bonus ajout√© avec succ√®s !")

    # Section pour visualiser les bonus existants
    with st.expander("Analyse des Bonus"):
        col1, col2 = st.columns(2)

        # Graphique de l'√©volution des bonus au fil du temps
        with col1:
            st.subheader("√âvolution des bonus")
            if not data['bonus'].empty:
                fig = px.line(data['bonus'], x='date', y='amount',
                              title="Montant des bonus au fil du temps",
                              labels={'x': 'Date', 'y': 'Montant'})
                st.plotly_chart(fig)
            else:
                st.info("Aucun bonus enregistr√© pour l'instant.")

        # Tableau des bonus
        with col2:
            st.subheader("Liste des bonus")
            if not data['bonus'].empty:
                st.dataframe(data['bonus'],
                             column_config={
                                 'id_bonus': {'visible': False},
                                 'date': {'label': 'Date'},
                                 'amount': {'label': 'Montant', 'format': '${{value:.2f}'},
                                 'description': {'label': 'Description'}
                             })
            else:
                st.info("Aucun bonus enregistr√© pour l'instant.")

    # Interface utilisateur pour filtrer les bonus par p√©riode
    st.subheader("Calcul du Total des Bonus selon la P√©riode")
    start_date = st.date_input("Date de D√©but", date.today())
    end_date = st.date_input("Date de Fin", date.today())

    if start_date <= end_date:
        filtered_bonus = data['bonus'][
            (data['bonus']['date'] >= start_date) &
            (data['bonus']['date'] <= end_date)
            ]

        if not filtered_bonus.empty:
            total_amount = filtered_bonus['amount'].sum()
            st.write(f"Montant Total du Bonus pour la p√©riode : **{total_amount}**")
        else:
            st.warning("Aucun bonus trouv√© pour cette p√©riode.")
    else:
        st.warning("La date de fin doit √™tre sup√©rieure ou √©gale √† la date de d√©but.")

    # Interface utilisateur pour g√©n√©rer un rapport au format PDF
    with st.expander("G√©n√©rer un Rapport"):
        if not data['bonus'].empty:
            # Code pour g√©n√©rer le rapport (√† impl√©menter selon vos besoins)
            st.info("Cliquez ici pour g√©n√©rer un rapport au format PDF.")
        else:
            st.warning("Aucun bonus enregistr√© pour g√©n√©rer un rapport.")

    # Informations compl√©mentaires
    with st.expander("Informations sur les Bonus"):
        st.markdown("""
        ### Guide rapide :
        - Vous pouvez ajouter de nouveaux bonus en utilisant l'onglet 'Ajouter un Bonus'.
        - Visualiser l'√©volution des bonus dans le graphique interactif.
        - Filtrer les bonus par p√©riode pour obtenir le total correspondant.
        """)


# Ajouter un pied de page
st.markdown("---")
st.markdown("¬© 2024 Dashboard de Suivi d'Activit√© - Garage Automobile")

# Performance par type de v√©hicule et type de prestation
st.subheader("Performance par type de v√©hicule et type de prestation")

if not filtered_prestations.empty:
    # Cr√©ation d'une heatmap pour voir les prestations les plus rentables par type de v√©hicule
    perf_matrix = filtered_prestations.pivot_table(
        index='type_vehicule',
        columns='type_prestation',
        values='marge_totale',
        aggfunc='mean'
    ).fillna(0)

    fig = px.imshow(
        perf_matrix,
        labels=dict(x="Type de prestation", y="Type de v√©hicule", color="Marge moyenne (‚Ç¨)"),
        text_auto='.0f',
        aspect="auto",
        title="Marge moyenne par type de v√©hicule et prestation"
    )

    st.plotly_chart(fig, use_container_width=True, key='heatmap_rentabilit√©_vehicule')

    # Temps moyen par type de prestation
    temps_moyen = filtered_prestations.groupby('type_prestation')['main_oeuvre_heures'].mean().reset_index()
    temps_moyen.sort_values('main_oeuvre_heures', ascending=False, inplace=True)

    fig = px.bar(
        temps_moyen,
        x='type_prestation',
        y='main_oeuvre_heures',
        title="Temps moyen par type de prestation",
        labels={'main_oeuvre_heures': 'Heures de main d\'≈ìuvre', 'type_prestation': 'Type de prestation'},
        text_auto='.1f'
    )

    st.plotly_chart(fig, use_container_width=True, key='tps_moyen_type_prestation')
else:
    st.info("Aucune donn√©e disponible pour la p√©riode s√©lectionn√©e")

# Analyse de rentabilit√©
st.subheader("Analyse de rentabilit√©")

col1, col2 = st.columns(2)

with col1:
    if not filtered_prestations.empty:
        # Calcul du ratio de rentabilit√© (marge / heures)
        filtered_prestations['rentabilite_horaire'] = filtered_prestations['marge_totale'] / filtered_prestations[
            'main_oeuvre_heures']

        rentabilite_prestation = filtered_prestations.groupby('type_prestation')[
            'rentabilite_horaire'].mean().reset_index()
        rentabilite_prestation.sort_values('rentabilite_horaire', ascending=False, inplace=True)

        fig = px.bar(
            rentabilite_prestation,
            x='type_prestation',
            y='rentabilite_horaire',
            title="Rentabilit√© horaire par type de prestation",
            labels={'rentabilite_horaire': 'Marge par heure (‚Ç¨/h)', 'type_prestation': 'Type de prestation'},
            text_auto='.0f'
        )

        st.plotly_chart(fig, use_container_width=True, key='rentabilit√©_heure')
    else:
        st.info("Aucune donn√©e de prestations disponible pour la p√©riode s√©lectionn√©e")

with col2:
    if not filtered_prestations.empty and not filtered_charges.empty:
        # Calcul du point mort
        ca_total = filtered_prestations['montant_total_ttc'].sum()
        charges_totales = filtered_charges['montant'].sum()

        # Calculer le CA journalier moyen
        jours_periode = (filtered_prestations['date'].max() - filtered_prestations['date'].min()).days + 1
        ca_journalier = ca_total / jours_periode if jours_periode > 0 else 0

        # Calculer les charges journali√®res
        charges_journalieres = charges_totales / jours_periode if jours_periode > 0 else 0

        # Point mort en jours (combien de jours pour couvrir les charges)
        point_mort_jours = charges_totales / ca_journalier if ca_journalier > 0 else float('inf')

        # Afficher le r√©sultat
        st.metric("CA journalier moyen", f"{ca_journalier:.2f} ‚Ç¨")
        st.metric("Charges journali√®res moyennes", f"{charges_journalieres:.2f} ‚Ç¨")

        if point_mort_jours != float('inf'):
            st.metric("Point mort", f"{point_mort_jours:.1f} jours de travail")
        else:
            st.error("Point mort non calculable (CA journalier nul)")
    else:
        st.info("Donn√©es insuffisantes pour la p√©riode s√©lectionn√©e")

# Pr√©visions et tendances
st.subheader("Pr√©visions et tendances")

if not filtered_prestations.empty:
    # √âvolution du CA au fil du temps
    ca_daily = filtered_prestations.groupby(filtered_prestations['date'])['montant_total_ttc'].sum().reset_index()
    ca_daily.sort_values('date', inplace=True)

    # Calculer la moyenne mobile sur 7 jours
    ca_daily['moyenne_mobile_7j'] = ca_daily['montant_total_ttc'].rolling(window=7, min_periods=1).mean()

    fig = px.line(
        ca_daily,
        x='date',
        y=['montant_total_ttc', 'moyenne_mobile_7j'],
        title="√âvolution du CA quotidien et tendance",
        labels={'value': 'Montant (‚Ç¨)', 'date': 'Date', 'variable': ''},
        color_discrete_map={
            'montant_total_ttc': 'lightblue',
            'moyenne_mobile_7j': 'darkblue'
        }
    )

    fig.update_layout(hovermode="x unified")
    st.plotly_chart(fig, use_container_width=True, key='prevision_tendance')

    # Analyse de saisonnalit√© par jour de la semaine
    ca_daily['jour_semaine'] = ca_daily['date'].dt.day_name()

    # Ordre des jours de la semaine
    jours_ordre = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
    jours_fr = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche']

    mapping_jours = dict(zip(jours_ordre, jours_fr))
    ca_daily['jour_semaine_fr'] = ca_daily['jour_semaine'].map(mapping_jours)

    ca_jour_semaine = ca_daily.groupby('jour_semaine_fr')['montant_total_ttc'].mean().reset_index()

    # R√©ordonner les jours de la semaine
    ca_jour_semaine['ordre'] = ca_jour_semaine['jour_semaine_fr'].map(dict(zip(jours_fr, range(7))))
    ca_jour_semaine.sort_values('ordre', inplace=True)

    fig = px.bar(
        ca_jour_semaine,
        x='jour_semaine_fr',
        y='montant_total_ttc',
        title="CA moyen par jour de la semaine",
        labels={'montant_total_ttc': 'CA moyen (‚Ç¨)', 'jour_semaine_fr': 'Jour de la semaine'},
        text_auto='.0f'
    )

    st.plotly_chart(fig, use_container_width=True, key='saisonnalite_jour_semaine')
else:
    st.info("Aucune donn√©e de prestations disponible pour la p√©riode s√©lectionn√©e")

# KPIs avanc√©s
st.subheader("KPIs et indicateurs cl√©s")

col1, col2, col3 = st.columns(3)

if not filtered_prestations.empty:
    with col1:
        # Taux de conversion horaire (combien rapporte une heure factur√©e en moyenne)
        taux_conversion = filtered_prestations['montant_total_ttc'].sum() / filtered_prestations[
            'main_oeuvre_heures'].sum() if filtered_prestations['main_oeuvre_heures'].sum() > 0 else 0
        st.metric("Taux horaire moyen factur√©", f"{taux_conversion:.2f} ‚Ç¨/h")

        # Montant moyen par prestation
        montant_moyen = filtered_prestations['montant_total_ttc'].mean()
        st.metric("Montant moyen par prestation", f"{montant_moyen:.2f} ‚Ç¨")

    with col2:
        # Ratio pi√®ces/main d'≈ìuvre
        ratio_pieces_mo = filtered_prestations['montant_pieces'].sum() / filtered_prestations[
            'montant_main_oeuvre'].sum() if filtered_prestations['montant_main_oeuvre'].sum() > 0 else 0
        st.metric("Ratio pi√®ces/main d'≈ìuvre", f"{ratio_pieces_mo:.2f}")

        # Marge moyenne par prestation
        marge_moyenne = filtered_prestations['marge_totale'].mean()
        st.metric("Marge moyenne par prestation", f"{marge_moyenne:.2f} ‚Ç¨")

    with col3:
        # Nombre de prestations par jour
        nb_jours = len(filtered_prestations['date'].dt.date.unique())
        prestations_par_jour = len(filtered_prestations) / nb_jours if nb_jours > 0 else 0
        st.metric("Prestations par jour", f"{prestations_par_jour:.1f}")

        # D√©lai moyen entre prestations (pour les clients r√©guliers)
        if len(filtered_prestations) > 10:  # Seulement si assez de donn√©es
            # Simuler un ID client pour l'exemple (en r√©alit√© il faudrait avoir cette donn√©e)
            filtered_prestations['client_id'] = np.random.randint(1, 100, size=len(filtered_prestations))

            # Compter les clients avec plus d'une prestation
            clients_count = filtered_prestations.groupby('client_id').size()
            clients_reguliers = clients_count[clients_count > 1].count()

            st.metric("Clients r√©guliers", f"{clients_reguliers}")
        else:
            st.info("Donn√©es insuffisantes pour certains KPIs")
else:
    st.info("Aucune donn√©e disponible pour calculer les KPIs")

# Recommandations automatiques
st.subheader("Recommandations")

if not filtered_prestations.empty and not filtered_charges.empty:
    recommandations = []

    # Analyse des prestations les plus rentables
    prestations_rentables = filtered_prestations.groupby('type_prestation')['rentabilite_horaire'].mean().sort_values(
        ascending=False)
    prestations_populaires = filtered_prestations.groupby('type_prestation').size().sort_values(ascending=False)

    # Identifier les prestations rentables mais peu populaires
    top_rentables = set(prestations_rentables.head(3).index)
    top_populaires = set(prestations_populaires.head(3).index)

    opportunites = top_rentables - top_populaires
    if opportunites:
        recommandations.append(
            f"Opportunit√©: Les prestations {', '.join(opportunites)} sont tr√®s rentables mais peu fr√©quentes. Consid√©rez des actions marketing pour ces services.")

    # Analyse des techniciens
    tech_perf = filtered_prestations.groupby('technicien')['marge_totale'].sum().sort_values()
    if len(tech_perf) >= 3:
        least_performing = tech_perf.index[0]
        recommandations.append(
            f"Formation: {least_performing} g√©n√®re moins de marge que les autres techniciens. Envisagez une formation ou un accompagnement.")

    # Analyse des charges
    charges_elevees = filtered_charges.groupby('type')['montant'].sum().sort_values(ascending=False).head(1)
    if not charges_elevees.empty:
        top_charge = charges_elevees.index[0]
        recommandations.append(
            f"Optimisation des co√ªts: {top_charge} repr√©sente une part importante des charges. Examinez les possibilit√©s de r√©duction.")

    # Analyse saisonni√®re
    if 'ca_jour_semaine' in locals():
        jours_faibles = ca_jour_semaine.sort_values('montant_total_ttc').iloc[0]['jour_semaine_fr']
        recommandations.append(
            f"Activit√©: Le {jours_faibles} est g√©n√©ralement le jour le moins actif. Envisagez des promotions sp√©ciales pour ce jour.")

    # Afficher les recommandations
    if recommandations:
        for i, rec in enumerate(recommandations, 1):
            st.info(f"{i}. {rec}")
    else:
        st.success("Pas de recommandations sp√©cifiques pour la p√©riode s√©lectionn√©e.")
else:
    st.info("Donn√©es insuffisantes pour g√©n√©rer des recommandations")

# Ajouter un pied de page
st.markdown("---")
st.markdown("¬© 2024 Dashboard de Suivi d'Activit√© - Garage Automobile")

"""


1. **Analyse crois√©e v√©hicule/prestation** : Une heatmap qui montre la rentabilit√© moyenne par type de v√©hicule et type de prestation pour identifier les combinaisons les plus lucratives.

2. **Analyse de rentabilit√©** :
   - Calcul de la rentabilit√© horaire par type de prestation
   - Analyse du point mort (nombre de jours n√©cessaires pour couvrir les charges)

3. **Pr√©visions et tendances** :
   - √âvolution du CA quotidien avec moyenne mobile sur 7 jours
   - Analyse des performances par jour de la semaine pour identifier les patterns r√©currents

4. **KPIs avanc√©s** :
   - Taux horaire moyen factur√©
   - Montant moyen par prestation
   - Ratio pi√®ces/main d'≈ìuvre
   - Marge moyenne par prestation
   - Nombre de prestations par jour
   - Suivi des clients r√©guliers

5. **Recommandations automatiques** qui analysent les donn√©es pour sugg√©rer des actions concr√®tes :
   - Identification des prestations rentables mais peu fr√©quentes
   - D√©tection des techniciens moins performants qui pourraient b√©n√©ficier de formation
   - Analyse des charges les plus importantes pour optimisation
   - Suggestion d'actions pour les jours de la semaine moins rentables

Cette application  permet une vision compl√®te l'activit√© du garage avec :
- Le suivi financier (CA, marges, charges)
- L'analyse des prestations (types, rentabilit√©)
- La gestion des fournisseurs et des pi√®ces
- Le suivi des absences du personnel
- Des analyses avanc√©es pour prendre des d√©cisions strat√©giques

Pour utiliser cette application, il  suffira de remplacer les donn√©es fictives par les donn√©es r√©elles en modifiant la fonction `generate_sample_data()` ou en important vos donn√©es depuis des fichiers.

"""
